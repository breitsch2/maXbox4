PROGRAM RosettaIsaac;
   
///////////////////////////////////////////////////////////////////////////
//  #sign:1:48 max: MAXBOX8: 12/05/2020 15:30:15 M  M 
//  Purpose: http://www.rosettacode.org/wiki/The_ISAAC_Cipher#Pascal
//  #path>C:\maXbox\softwareschule\IBZ_2016\IBZ_IT_Security_2016\DVD Inhalt\RSA Berechnung\
//  Lines of Code #locs:284
///////////////////////////////////////////////////////////////////////////
//TODO: Save the QRCode to webserver_file, #locs:284
   

//USES StrUtils;
 
TYPE iMode = (iEncrypt,iDecrypt);
// TASK globals

VAR	msg : STRING; // = 'a Top Secret secret';
	key : STRING; // = 'this is my secret key';
	xctx: STRING; // = ''; // XOR ciphertext
	mctx: STRING; //= ''; // MOD ciphertext
	xptx: STRING; //= ''; // XOR decryption (plaintext)
	mptx: STRING; //= ''; // MOD decryption (plaintext)
	mode: iMode; //  = iEncrypt;
 
// ISAAC globals
// external results 
VAR	randrsl: ARRAY[0..256] OF CARDINAL;
	randcnt: cardinal;
// internal state 
VAR	mm: ARRAY[0..256] OF CARDINAL;
	aax: CARDINAL; bb: CARDINAL; cc: CARDINAL;  //=0;
	
	
	//captive crypto routine for entroypy test and large binary files!
	
	Procedure TEnDecryptFile(pathin, pathout: string; keyChave: Word);
   var
     InMS, OutMS: TMemoryStream;
     cnt: integer;
     C: byte;
    begin
      InMS:= TMemoryStream.Create;
      OutMS:= TMemoryStream.Create;
      try
        InMS.LoadFromFile(pathin);
        InMS.Position:= 0;
        for cnt:= 0 to InMS.Size- 1 do begin
           InMS.ReadByte(C, 1);
           C:= (C Xor Not (Ord(keyChave Shr cnt)));
           OutMS.Write(Chr(C), 1) ;
        end;
        OutMS.SaveToFile(pathout);
      finally
        InMS.Free;
        OutMS.Free;
      end;
    end;

 
PROCEDURE Isaac;
VAR i,x,y: CARDINAL;
BEGIN
   cc := cc + 1;    // cc just gets incremented once per 256 results 
   bb := bb + cc;   // then combined with bb 
 
   FOR i := 0 TO 255 DO BEGIN
     x := mm[i];
     CASE (i mod 4) OF
		0: aax := aax xor (aax shl 13);
		1: aax := aax xor (aax shr 6);
		2: aax := aax xor (aax shl 2);
		3: aax := aax xor (aax shr 16);
     END;
     aax := mm[(i+128) mod 256] + aax;
	 y  := mm[(x shr 2) mod 256] + aax + bb;
     mm[i] := y; 	
     bb := mm[(y shr 10) mod 256] + x; 
     randrsl[i]:= bb; 
   END;
   // this reset was not in the original readable.c
   randcnt:=0;  // prepare to use the first set of results 
END; {Isaac}
 
 
// if (flag==TRUE), then use the contents of randrsl[] to initialize mm[]. 
PROCEDURE mix(VAR a,b,c,d,e,f,g,h: CARDINAL);
BEGIN
	a := a xor b shl 11; d:=d+a; b:=b+c;
	b := b xor c shr  2; e:=e+b; c:=c+d;
	c := c xor d shl  8; f:=f+c; d:=d+e;
	d := d xor e shr 16; g:=g+d; e:=e+f;
	e := e xor f shl 10; h:=h+e; f:=f+g;
	f := f xor g shr  4; a:=a+f; g:=g+h;
	g := g xor h shl  8; b:=b+g; h:=h+a;
	h := h xor a shr  9; c:=c+h; a:=a+b;
END; {mix}
 
 
PROCEDURE iRandInit(flag: BOOLEAN);
VAR i,a,b,c,d,e,f,g,h: CARDINAL;
BEGIN
   aax:=0; bb:=0; cc:=0;
   a:=$9e3779b9; 	// the golden ratio
 
   b:=a; c:=a; d:=a; e:=a; f:=a; g:=a; h:=a; 
 
   FOR i := 0 TO 3 DO          // scramble it 
        mix(a,b,c,d,e,f,g,h);
 
   i:=0;
   REPEAT  // fill in mm[] with messy stuff 
	IF flag THEN BEGIN     // use all the information in the seed 
       a:=a+randrsl[i  ]; b:=b+randrsl[i+1]; c:=c+randrsl[i+2]; d:=d+randrsl[i+3];
     //  e+=randrsl[i+4]; f+=randrsl[i+5]; g+=randrsl[i+6]; h+=randrsl[i+7];
       e:=e+randrsl[i+4]; f:=f+randrsl[i+5]; g:=g+randrsl[i+6]; h:=h+randrsl[i+7];
 
    END;
 
    mix(a,b,c,d,e,f,g,h);
    mm[i  ]:=a; mm[i+1]:=b; mm[i+2]:=c; mm[i+3]:=d;
    mm[i+4]:=e; mm[i+5]:=f; mm[i+6]:=g; mm[i+7]:=h;
	i:=i+8;
   UNTIL i>255;
 
   IF (flag) THEN BEGIN
   // do a second pass to make all of the seed affect all of mm 
     i:=0;
     REPEAT
   //   a+=mm[i  ]; b+=mm[i+1]; c+=mm[i+2]; d+=mm[i+3];
    //  e+=mm[i+4]; f+=mm[i+5]; g+=mm[i+6]; h+=mm[i+7];
      a:=a+mm[i  ]; b:=b+mm[i+1]; c:=c+mm[i+2]; d:=d+mm[i+3];
      e:=e+mm[i+4]; f:=f+mm[i+5]; g:=g+mm[i+6]; h:=h+mm[i+7];
   
      mix(a,b,c,d,e,f,g,h);
      mm[i  ]:=a; mm[i+1]:=b; mm[i+2]:=c; mm[i+3]:=d;
      mm[i+4]:=e; mm[i+5]:=f; mm[i+6]:=g; mm[i+7]:=h;
      i:=i+8;
     UNTIL i>255; 
   END;
   isaac();           // fill in the first set of results 
   randcnt:=0;       // prepare to use the first set of results 
END; {randinit}
 
 
{ Seed ISAAC with a given string.
  The string can be any size. The first 256 values will be used.}
PROCEDURE iSeed(seed: STRING; flag: BOOLEAN);
VAR i,m: CARDINAL;
BEGIN
	FOR i:= 0 TO 255 DO mm[i]:=0;
	m := Length(seed)-1;
	FOR i:= 0 TO 255 DO BEGIN
	// in case seed has less than 256 elements
        IF i>m THEN randrsl[i]:=0  
			// Pascal strings are 1-based
			ELSE randrsl[i]:=ord(seed[i+1]);
	END;
	// initialize ISAAC with seed
	iRandInit(flag);
END; {iSeed}
 
 
{ Get a random 32-bit value 0..MAXINT }
FUNCTION iRandom : Cardinal;
BEGIN
	result := randrsl[randcnt];
	inc(randcnt);
	IF (randcnt >255) THEN BEGIN
		Isaac();
		randcnt := 0;
	END;
END; {iRandom}
 
 
{ Get a random character in printable ASCII range }
FUNCTION iRandA: BYTE;
	BEGIN
		result := iRandom mod 95 + 32;
	END;
 
 
{ convert an ASCII string to a hexadecimal string }
FUNCTION ascii2hex(s: STRING): STRING;
	VAR i,l: CARDINAL;
	BEGIN
		result := '';
			l := Length(s);
			FOR i := 1 TO l DO
				result:=result + Dec2Numb(ord(s[i]),2,16);
	END;
 
 
{ XOR encrypt on random stream. Output: ASCII string }
FUNCTION Vernam(msg: STRING): STRING;
	VAR	i: CARDINAL;
	BEGIN
		result := '';
		FOR i := 1 to length(msg) DO
			result:= result + chr(iRandA xor ord(msg[i]));
	END;
 
 
{ Get position of the letter in chosen alphabet }
FUNCTION letternum(letter, start: CHAR): byte; //OR Byte!
	BEGIN
		result:= (ord(letter)-ord(start));
		//debug write(itoa(result))
	END;
 
 
{ Caesar-shift a character <shift> places: Generalized Vigenere }
FUNCTION Caesar(m: iMode; ch: CHAR; shift, modulo: INTEGER; start: CHAR): CHAR;
	VAR n: INTEGER;
	BEGIN
		IF m = iDecrypt THEN shift:= -shift;
		n := letternum(ch,start);
		n:= n+shift;
		// debug write(itoa(n))
		n := n MOD modulo;
	//	IF n<0 THEN n += modulo;
		IF n<0 THEN n:= n+ modulo;
	
   	result := chr(ord(start)+n);
	END;
 
 
{ Vigenere mod 95 encryption & decryption. Output: ASCII string }
FUNCTION Vigenere(msg: STRING; m: iMode): STRING;
	VAR i: CARDINAL;
	BEGIN
		result := '';
		FOR i := 1 to length(msg) DO
			result:= result + Caesar(m,msg[i],iRandA,95,' ');
	END;
	
Procedure InitValues;
begin
   msg:= 'a Top Secret secret';
	key := 'this is my secret key';
	xctx:= ''; // XOR ciphertext
	mctx:= ''; // MOD ciphertext
	xptx:= ''; // XOR decryption (plaintext)
	mptx:= ''; // MOD decryption (plaintext)
	mode:= iEncrypt;
	aax:= 0; bb:= 0; cc:= 0;
 end;	
 
 
BEGIN
   InitValues;
	// 1) seed ISAAC with the key
	iSeed(key,true);
	// 2) Encryption
	mode := iEncrypt;
	// a) XOR (Vernam)
	xctx := Vernam(msg);
	// b) MOD (Vigenere) 
	mctx := Vigenere(msg,mode);
	// 3) Decryption
	mode := iDecrypt;
	iSeed(key,true);
	// a) XOR (Vernam)
	xptx:= Vernam(xctx);
	// b) MOD (Vigenere)
	mptx:= Vigenere(mctx,mode);
	// program output
	Writeln('Message: '+msg);
	Writeln('Key    : '+key);
	Writeln('XOR    : '+ascii2hex(xctx));
	Writeln('MOD    : '+ascii2hex(mctx));
	Writeln('XOR dcr: '+xptx);
	Writeln('MOD dcr: '+mptx);
	Writeln('test CPU Speed: '+cpuspeed)
	
	TEnDecryptFile(exepath+'firstdemo.txt',exepath+'firstdemoc.txt',1234567)
	TEnDecryptFile(exepath+'firstdemoc.txt',exepath+'firstdemo.txt',1234567)

//	TEnDecryptFile(exepath+'mX4mapboxbern.png',exepath+'mX4mapboxbernc.png',1234567)
//	TEnDecryptFile(exepath+'mX4mapboxbernc.png',exepath+'mX4mapboxbern.png',1234567)

	//TEnDecryptFile(exepath+'maXbox4crypt.exe',exepath+'maXbox4cryptc.exe',1234567)
	//TEnDecryptFile(exepath+'maXbox4cryptc.exe',exepath+'maXbox4crypt.exe',1234567)
	
END.


test ref:

Output:

Message: a Top Secret secret
Key    : this is my secret key
XOR    : 1C0636190B1260233B35125F1E1D0E2F4C5422
MOD    : 734270227D36772A783B4F2A5F206266236978
XOR dcr: a Top Secret secret
MOD dcr: a Top Secret secret

Doc:
http://www.rosettacode.org/wiki/The_ISAAC_Cipher#Pascal

----app_template_loaded_code----
----File newtemplate.txt not exists - now saved!----