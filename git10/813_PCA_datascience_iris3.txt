{ ******************************************************************
  Correlation and principal component analysis PCA
  ******************************************************************
  Example taken from: DataSet https://archive.ics.uci.edu/ml/datasets/Iris/
  P. DAGNELIE, Analyse statistique a plusieurs variables, #locs:464
  Presses Agronomiques de Gembloux, Belgique, 1982 
  ****************************************************************** }
  // maxbox_starter59.pdf

program pcatest_mX4_Irisdataset3;

{source": [
    "from sklearn.datasets import load_iris\n",
    "from sklearn.decomposition import PCA\n",
    "import pylab as pl\n",
    "from itertools import cycle\n",}

//uses
  //dmath;
  
  Const Iris_DATASET = '.\iris.data';
  //http://www.softwareschule.ch/examples/iris.txt 
  
  function DMathFact(N: Integer): float;
  external 'Fact@dmath.dll';

  function DPower(X, Y : Float): Float;
  external 'Power@dmath.dll';
  
  procedure VecMean(X          : TMatrix;
                  Lb, Ub, Nvar : Integer;
                  M            : TVector); external 'VecMean@dmath.dll';
{ Computes the mean vector M from matrix X }

  procedure MatVarCov(X          : TMatrix;
                    Lb, Ub, Nvar : Integer;
                    M            : TVector;
                    V            : TMatrix); external 'MatVarCov@dmath.dll';
 { Computes the variance-covariance matrix V from matrix X }
 
  procedure MatCorrel(V    : TMatrix;
                    Nvar : Integer;
                    R    : TMatrix); external 'MatCorrel@dmath.dll';
{ Computes the correlation matrix R from the var-cov matrix V }

  procedure VecSD(X          : TMatrix;
                Lb, Ub, Nvar : Integer;
                M, S         : TVector); external 'VecSD@dmath.dll';
{ Computes the vector of standard deviations S from matrix X }

 

   procedure ScaleVar(X         : TMatrix;
                   Lb, Ub, Nvar : Integer;
                   M, S         : TVector;
                   Z            : TMatrix); external 'ScaleVar@dmath.dll';
{ Scales a set of variables by subtracting means and dividing by SD's }

   procedure PCA(R   : TMatrix;
              Nvar   : Integer;
              Lambda : TVector;
              C, Rc  : TMatrix); external 'PCA@dmath.dll';
{ Performs a principal component analysis of the correlation matrix R }

   procedure PrinFac(Z         : TMatrix;
                  Lb, Ub, Nvar : Integer;
                  C, F         : TMatrix); external 'PrinFac@dmath.dll';
{ Computes principal factors }


Const
  N    = 150;  { Number of observations of iris flowers}
  Nvar = 4;   { Number of variables }

{ Data }
var X : array[1..N] of array[1..Nvar] of Float;
{ =
(( 87.9, 19.6,   1  , 1661),
 ( 89.9, 15.2,  90.1,  968),
 (153  , 19.7,  56.6, 1353),
 (132.1, 17  ,  91  , 1293),
 ( 88.8, 18.3,  93.7, 1153),
 (220.9, 17.8, 106.9, 1286),
 (117.7, 17.8,  65.5, 1104),
 (109  , 18.3,  41.8, 1574),
 (156.1, 17.8,  57.4, 1222),
 (181.5, 16.8, 140.6,  902),
 (181.4, 17  ,  74.3, 1150)); }

var
  XX     : TMatrix;  { Data }
  M      : TVector;  { Mean vector }
  V      : TMatrix;  { Variance-covariance matrix }
  R      : TMatrix;  { Correlation matrix }
  S      : TVector;  { Standard deviations }
  Lambda : TVector;  { Eigenvalues of correlation matrix }
  C      : TMatrix;  { Eigenvectors of correlation matrix }
  Rc     : TMatrix;  { Correlation factors/variables }
  Z      : TMatrix;  { Scaled variables }
  F      : TMatrix;  { Principal factors }
  I, J   : Integer;  { Loop variables }
  
  function SetAutoInc(FileName: TFileName; NewValue:Longint): Boolean;
   begin
    with TFileStream.Create(FileName, fmOpenReadWrite) do
    //Seek($49, soFromBeginning)
    try
    //Result:= (Seek($49, soFromBeginning) = $49) and (Writeint(NewValue, 4) = 4);
    finally
    Free;
    end;
  end;

procedure setupMData;
begin
  X[1][1]:=87.9;     X[1] [2]:=19.6   X[1] [3]:=1     X[1] [4]:=1661;
  X[2][1]:=89.9;     X[2] [2]:=15.2   X[2] [3]:=90.1  X[2] [4]:=968;
  X[3][1]:=153 ;     X[3] [2]:=19.7   X[3] [3]:=56.6  X[3] [4]:=1353;
  X[4][1]:=132.1;    X[4] [2]:=17     X[4] [3]:=91    X[4] [4]:=1293;
  X[5][1]:=88.8;     X[5] [2]:=18.3   X[5] [3]:=93.7  X[5] [4]:=1153;
  X[6][1]:=220.9;    X[6] [2]:=17.8   X[6] [3]:=106.9 X[6] [4]:=1286;
  X[7][1]:=117.7;    X[7] [2]:=17.8   X[7] [3]:=65.5  X[7] [4]:=1104;
  X[8][1]:=109;      X[8] [2]:=18.3   X[8] [3]:=41.8  X[8] [4]:=1574;
  X[9][1]:=156.1;    X[9] [2]:=17.8   X[9] [3]:=57.4  X[9] [4]:=1222;
  X[10][1]:=181.5;   X[10][2]:=16.8   X[10][3]:=140.6 X[10][4]:=902;
  X[11][1]:=181.4;   X[11][2]:=17     X[11][3]:=74.3  X[11][4]:=1150;
end;  
  
procedure setupMDataIris;
begin
  //-------------------------Iris-setosa
  X[01][01]:=5.1    X[01][02]:=3.5   X[01][03]:=1.4  X[01][04]:=0.2
  X[02][01]:=4.9    X[02][02]:=3.0   X[02][03]:=1.4  X[02][04]:=0.2
  X[03][01]:=4.7    X[03][02]:=3.2   X[03][03]:=1.3  X[03][04]:=0.2
  X[04][01]:=4.6    X[04][02]:=3.1   X[04][03]:=1.5  X[04][04]:=0.2
  X[05][01]:=5.0    X[05][02]:=3.6   X[05][03]:=1.4  X[05][04]:=0.2
  X[06][01]:=5.4    X[06][02]:=3.9   X[06][03]:=1.7  X[06][04]:=0.4
  X[07][01]:=4.6    X[07][02]:=3.4   X[07][03]:=1.4  X[07][04]:=0.3
  X[08][01]:=5.0    X[08][02]:=3.4   X[08][03]:=1.5  X[08][04]:=0.2
  X[09][01]:=4.4    X[09][02]:=2.9   X[09][03]:=1.4  X[09][04]:=0.2
  X[10][01]:=4.9    X[10][02]:=3.1   X[10][03]:=1.5  X[10][04]:=0.1
  X[11][01]:=5.4    X[11][02]:=3.7   X[11][03]:=1.5  X[11][04]:=0.2
  X[12][01]:=4.8    X[12][02]:=3.4   X[12][03]:=1.6  X[12][04]:=0.2
  X[13][01]:=4.8    X[13][02]:=3.0   X[13][03]:=1.4  X[13][04]:=0.1
  X[14][01]:=4.3    X[14][02]:=3.0   X[14][03]:=1.1  X[14][04]:=0.1
  X[15][01]:=5.8    X[15][02]:=4.0   X[15][03]:=1.2  X[15][04]:=0.2
  X[16][01]:=5.7    X[16][02]:=4.4   X[16][03]:=1.5  X[16][04]:=0.4
  X[17][01]:=5.4    X[17][02]:=3.9   X[17][03]:=1.3  X[17][04]:=0.4
  X[18][01]:=5.1    X[18][02]:=3.5   X[18][03]:=1.4  X[18][04]:=0.3
  X[19][01]:=5.7    X[19][02]:=3.8   X[19][03]:=1.7  X[19][04]:=0.3
  X[20][01]:=5.1    X[20][02]:=3.8   X[20][03]:=1.5  X[20][04]:=0.3

  X[21][01]:=5.4    X[21][02]:=3.4   X[21][03]:=1.7  X[21][04]:=0.2
  X[22][01]:=5.1    X[22][02]:=3.7   X[22][03]:=1.5  X[22][04]:=0.4
  X[23][01]:=4.6    X[23][02]:=3.6   X[23][03]:=1.0  X[23][04]:=0.2
  X[24][01]:=5.1    X[24][02]:=3.3   X[24][03]:=1.7  X[24][04]:=0.5
  X[25][01]:=4.8    X[25][02]:=3.4   X[25][03]:=1.9  X[25][04]:=0.2
  X[26][01]:=5.0    X[26][02]:=3.0   X[26][03]:=1.6  X[26][04]:=0.2
  X[27][01]:=5.0    X[27][02]:=3.4   X[27][03]:=1.6  X[27][04]:=0.4
  X[28][01]:=5.2    X[28][02]:=3.5   X[28][03]:=1.5  X[28][04]:=0.2
  X[29][01]:=5.2    X[29][02]:=3.4   X[29][03]:=1.4  X[29][04]:=0.2
  X[30][01]:=4.7    X[30][02]:=3.2   X[30][03]:=1.6  X[30][04]:=0.2

  X[31][01]:=4.8    X[31][02]:=3.1   X[31][03]:=1.6  X[31][04]:=0.2
  X[32][01]:=5.4    X[32][02]:=3.4   X[32][03]:=1.5  X[32][04]:=0.4
  X[33][01]:=5.2    X[33][02]:=4.1   X[33][03]:=1.5  X[33][04]:=0.1
  X[34][01]:=5.5    X[34][02]:=4.2   X[34][03]:=1.4  X[34][04]:=0.2
  X[35][01]:=4.9    X[35][02]:=3.1   X[35][03]:=1.5  X[35][04]:=0.1
  X[36][01]:=5.0    X[36][02]:=3.2   X[36][03]:=1.2  X[36][04]:=0.2
  X[37][01]:=5.5    X[37][02]:=3.5   X[37][03]:=1.3  X[37][04]:=0.2
  X[38][01]:=4.9    X[38][02]:=3.1   X[38][03]:=1.5  X[38][04]:=0.1
  X[39][01]:=4.4    X[39][02]:=3.0   X[39][03]:=1.3  X[39][04]:=0.2
  X[40][01]:=5.1    X[40][02]:=3.4   X[40][03]:=1.5  X[40][04]:=0.2

  X[41][01]:=5.0    X[41][02]:=3.5   X[41][03]:=1.3  X[41][04]:=0.3
  X[42][01]:=4.5    X[42][02]:=2.3   X[42][03]:=1.3  X[42][04]:=0.3
  X[43][01]:=4.4    X[43][02]:=3.2   X[43][03]:=1.3  X[43][04]:=0.2
  X[44][01]:=5.0    X[44][02]:=3.5   X[44][03]:=1.6  X[44][04]:=0.6
  X[45][01]:=5.1    X[45][02]:=3.8   X[45][03]:=1.9  X[45][04]:=0.4
  X[46][01]:=4.8    X[46][02]:=3.0   X[46][03]:=1.4  X[46][04]:=0.3
  X[47][01]:=5.1    X[47][02]:=3.8   X[47][03]:=1.6  X[47][04]:=0.2
  X[48][01]:=4.6    X[48][02]:=3.2   X[48][03]:=1.4  X[48][04]:=0.2
  X[49][01]:=5.3    X[49][02]:=3.7   X[49][03]:=1.5  X[49][04]:=0.2
  X[50][01]:=5.0    X[50][02]:=3.3   X[50][03]:=1.4  X[50][04]:=0.2
 //-------------------  Iris-versicolor
  X[51][01]:=7.0    X[51][02]:=3.2   X[51][03]:=4.7  X[51][04]:=1.4
  X[52][01]:=6.4    X[52][02]:=3.2   X[52][03]:=4.5  X[52][04]:=1.5
  X[53][01]:=6.9    X[53][02]:=3.1   X[53][03]:=4.9  X[53][04]:=1.5
  X[54][01]:=5.5    X[54][02]:=2.3   X[54][03]:=4.0  X[54][04]:=1.3
  X[55][01]:=6.5    X[55][02]:=2.8   X[55][03]:=4.6  X[55][04]:=1.5
  X[56][01]:=5.7    X[56][02]:=2.8   X[56][03]:=4.5  X[56][04]:=1.3
  X[57][01]:=6.3    X[57][02]:=3.3   X[57][03]:=4.7  X[57][04]:=1.6
  X[58][01]:=4.9    X[58][02]:=2.4   X[58][03]:=3.3  X[58][04]:=1.0
  X[59][01]:=6.6    X[59][02]:=2.9   X[59][03]:=4.6  X[59][04]:=1.3
  X[60][01]:=5.2    X[60][02]:=2.7   X[60][03]:=3.9  X[60][04]:=1.4
  X[61][01]:=5.0    X[61][02]:=2.0   X[61][03]:=3.5  X[61][04]:=1.0
  X[62][01]:=5.9    X[62][02]:=3.0   X[62][03]:=4.2  X[62][04]:=1.5
  X[63][01]:=6.0    X[63][02]:=2.2   X[63][03]:=4.0  X[63][04]:=1.0
  X[64][01]:=6.1    X[64][02]:=2.9   X[64][03]:=4.7  X[64][04]:=1.4
  X[65][01]:=5.6    X[65][02]:=2.9   X[65][03]:=3.6  X[65][04]:=1.3
  X[66][01]:=6.7    X[66][02]:=3.1   X[66][03]:=4.4  X[66][04]:=1.4
  X[67][01]:=5.6    X[67][02]:=3.0   X[67][03]:=4.5  X[67][04]:=1.5
  X[68][01]:=5.8    X[68][02]:=2.7   X[68][03]:=4.1  X[68][04]:=1.0
  X[69][01]:=6.2    X[69][02]:=2.2   X[69][03]:=4.5  X[69][04]:=1.5
  X[70][01]:=5.6    X[70][02]:=2.5   X[70][03]:=3.9  X[70][04]:=1.1

  X[71][01]:=5.9    X[71][02]:=3.2   X[71][03]:=4.8  X[71][04]:=1.8
  X[72][01]:=6.1    X[72][02]:=2.8   X[72][03]:=4.0  X[72][04]:=1.3
  X[73][01]:=6.3    X[73][02]:=2.5   X[73][03]:=4.9  X[73][04]:=1.5
  X[74][01]:=6.1    X[74][02]:=2.8   X[74][03]:=4.7  X[74][04]:=1.2
  X[75][01]:=6.4    X[75][02]:=2.9   X[75][03]:=4.3  X[75][04]:=1.3
  X[76][01]:=6.6    X[76][02]:=3.0   X[76][03]:=4.4  X[76][04]:=1.4
  X[77][01]:=6.8    X[77][02]:=2.8   X[77][03]:=4.8  X[77][04]:=1.4
  X[78][01]:=6.7    X[78][02]:=3.0   X[78][03]:=5.0  X[78][04]:=1.7
  X[79][01]:=6.0    X[79][02]:=2.9   X[79][03]:=4.5  X[79][04]:=1.5
  X[80][01]:=5.7    X[80][02]:=2.6   X[80][03]:=3.5  X[80][04]:=1.0
  X[81][01]:=5.5    X[81][02]:=2.4   X[81][03]:=3.8  X[81][04]:=1.1
  X[82][01]:=5.5    X[82][02]:=2.4   X[82][03]:=3.7  X[82][04]:=1.0
  X[83][01]:=5.8    X[83][02]:=2.7   X[83][03]:=3.9  X[83][04]:=1.2
  X[84][01]:=6.0    X[84][02]:=2.7   X[84][03]:=5.1  X[84][04]:=1.6
  X[85][01]:=5.4    X[85][02]:=3.0   X[85][03]:=4.5  X[85][04]:=1.5
  X[86][01]:=6.0    X[86][02]:=3.4   X[86][03]:=4.5  X[86][04]:=1.6
  X[87][01]:=6.7    X[87][02]:=3.1   X[87][03]:=4.7  X[87][04]:=1.5
  X[88][01]:=6.3    X[88][02]:=2.3   X[88][03]:=4.4  X[88][04]:=1.3
  X[89][01]:=5.6    X[89][02]:=3.0   X[89][03]:=4.1  X[89][04]:=1.3
  X[90][01]:=5.5    X[90][02]:=2.5   X[90][03]:=4.0  X[90][04]:=1.3

  X[91][01]:=5.5    X[91][02]:=2.6   X[91][03]:=4.4  X[91][04]:=1.2
  X[92][01]:=6.1    X[92][02]:=3.0   X[92][03]:=4.6  X[92][04]:=1.4
  X[93][01]:=5.8    X[93][02]:=2.6   X[93][03]:=4.0  X[93][04]:=1.2
  X[94][01]:=5.0    X[94][02]:=2.3   X[94][03]:=3.3  X[94][04]:=1.0
  X[95][01]:=5.6    X[95][02]:=2.7   X[95][03]:=4.2  X[95][04]:=1.3
  X[96][01]:=5.7    X[96][02]:=3.0   X[96][03]:=4.2  X[96][04]:=1.2
  X[97][01]:=5.7    X[97][02]:=2.9   X[97][03]:=4.2  X[97][04]:=1.3
  X[98][01]:=6.2    X[98][02]:=2.9   X[98][03]:=4.3  X[98][04]:=1.3
  X[99][01]:=5.1    X[99][02]:=2.5   X[99][03]:=3.0  X[99][04]:=1.1
  X[100][01]:=5.7   X[100][02]:=2.8  X[100][03]:=4.1 X[100][04]:=1.3


  //-------------------  Iris-virginica
  X[101][01]:=6.3    X[101][02]:=3.3   X[101][03]:=6.0  X[101][04]:=2.5
  X[102][01]:=5.8    X[102][02]:=2.7   X[102][03]:=5.1  X[102][04]:=1.9
  X[103][01]:=7.1    X[103][02]:=3.0   X[103][03]:=5.9  X[103][04]:=2.1
  X[104][01]:=6.3    X[104][02]:=2.9   X[104][03]:=5.6  X[104][04]:=1.8
  X[105][01]:=6.5    X[105][02]:=3.0   X[105][03]:=5.8  X[105][04]:=2.2
  X[106][01]:=7.6    X[106][02]:=3.0   X[106][03]:=6.6  X[106][04]:=2.1
  X[107][01]:=4.9    X[107][02]:=2.5   X[107][03]:=4.5  X[107][04]:=1.7
  X[108][01]:=7.3    X[108][02]:=2.9   X[108][03]:=6.3  X[108][04]:=1.8
  X[109][01]:=6.7    X[109][02]:=2.5   X[109][03]:=5.8  X[109][04]:=1.8
  X[110][01]:=7.2    X[110][02]:=3.6   X[110][03]:=6.1  X[110][04]:=2.5
  X[111][01]:=6.5    X[111][02]:=3.2   X[111][03]:=5.1  X[111][04]:=2.0
  X[112][01]:=6.4    X[112][02]:=2.7   X[112][03]:=5.3  X[112][04]:=1.9
  X[113][01]:=6.8    X[113][02]:=3.0   X[113][03]:=5.5  X[113][04]:=2.1
  X[114][01]:=5.7    X[114][02]:=2.5   X[114][03]:=5.0  X[114][04]:=2.0
  X[115][01]:=5.8    X[115][02]:=2.8   X[115][03]:=5.1  X[115][04]:=2.4
  X[116][01]:=6.4    X[116][02]:=3.2   X[116][03]:=5.3  X[116][04]:=2.3
  X[117][01]:=6.5    X[117][02]:=3.0   X[117][03]:=5.5  X[117][04]:=1.8
  X[118][01]:=7.7    X[118][02]:=3.8   X[118][03]:=6.7  X[118][04]:=2.2
  X[119][01]:=7.7    X[119][02]:=2.6   X[119][03]:=6.9  X[119][04]:=2.3
  X[120][01]:=6.0    X[120][02]:=2.2   X[120][03]:=5.0  X[120][04]:=1.5

  X[121][01]:=6.9    X[121][02]:=3.2   X[121][03]:=5.7  X[121][04]:=2.3
  X[122][01]:=5.6    X[122][02]:=2.8   X[122][03]:=4.9  X[122][04]:=2.0
  X[123][01]:=7.7    X[123][02]:=2.8   X[123][03]:=6.7  X[123][04]:=2.0
  X[124][01]:=6.3    X[124][02]:=2.7   X[124][03]:=4.9  X[124][04]:=1.8
  X[125][01]:=6.7    X[125][02]:=3.3   X[125][03]:=5.7  X[125][04]:=2.1
  X[126][01]:=7.2    X[126][02]:=3.2   X[126][03]:=6.0  X[126][04]:=1.8
  X[127][01]:=6.2    X[127][02]:=2.8   X[127][03]:=4.8  X[127][04]:=1.8
  X[128][01]:=6.1    X[128][02]:=3.0   X[128][03]:=4.9  X[128][04]:=1.8
  X[129][01]:=6.4    X[129][02]:=2.8   X[129][03]:=5.6  X[129][04]:=2.1
  X[130][01]:=7.2    X[130][02]:=3.0   X[130][03]:=5.8  X[130][04]:=1.6

  X[131][01]:=7.4    X[131][02]:=2.8   X[131][03]:=6.1  X[131][04]:=1.9
  X[132][01]:=7.9    X[132][02]:=3.8   X[132][03]:=6.4  X[132][04]:=2.0
  X[133][01]:=6.4    X[133][02]:=2.8   X[133][03]:=5.6  X[133][04]:=2.2
  X[134][01]:=6.3    X[134][02]:=2.8   X[134][03]:=5.1  X[134][04]:=1.5
  X[135][01]:=6.1    X[135][02]:=2.6   X[135][03]:=5.6  X[135][04]:=1.4
  X[136][01]:=7.7    X[136][02]:=3.0   X[136][03]:=6.1  X[136][04]:=2.3
  X[137][01]:=6.3    X[137][02]:=3.4   X[137][03]:=5.6  X[137][04]:=2.4
  X[138][01]:=6.4    X[138][02]:=3.1   X[138][03]:=5.5  X[138][04]:=1.8
  X[139][01]:=6.0    X[139][02]:=3.0   X[139][03]:=4.8  X[139][04]:=1.8
  X[140][01]:=6.9    X[140][02]:=3.1   X[140][03]:=5.4  X[140][04]:=2.1
  X[141][01]:=6.7    X[141][02]:=3.1   X[141][03]:=5.6  X[141][04]:=2.4
  X[142][01]:=6.9    X[142][02]:=3.1   X[142][03]:=5.1  X[142][04]:=2.3
  X[143][01]:=5.8    X[143][02]:=2.7   X[143][03]:=5.1  X[143][04]:=1.9
  X[144][01]:=6.8    X[144][02]:=3.2   X[144][03]:=5.9  X[144][04]:=2.3
  X[145][01]:=6.7    X[145][02]:=3.3   X[145][03]:=5.7  X[145][04]:=2.5
  X[146][01]:=6.7    X[146][02]:=3.0   X[146][03]:=5.2  X[146][04]:=2.3
  X[147][01]:=6.3    X[147][02]:=2.5   X[147][03]:=5.0  X[147][04]:=1.9
  X[148][01]:=6.5    X[148][02]:=3.0   X[148][03]:=5.2  X[148][04]:=2.0
  X[149][01]:=6.2    X[149][02]:=3.4   X[149][03]:=5.4  X[149][04]:=2.3
  X[150][01]:=5.9    X[150][02]:=3.0   X[150][03]:=5.1  X[150][04]:=1.8

end;  

procedure setupMDataIrisList;
var stlist: TStringlist;
    ix, z, zi: integer;
begin
  stlist:= TStringlist.create;
   if fileexists(Iris_DATASET) then begin
      sr:= LoadFileAsString(Iris_DATASET);
     //CommaSeparatedToStringList(stlist, sr)
     //StrToStrings(S,Sep: AnsiString; const List:TStrings;const AllowEmptyString : Boolean)
      StrToStrings(sr,#10,stlist, true) 
      //writeln(stlist.text)  
      writeln('list of observations: '+itoa(stlist.count))
      for ix:= 1 to length(x)-1 do begin 
        zi:=1;
         for j:= 1 to Nvar do begin
            X[ix][j]:= strtofloat(copy(stlist[ix],zi,3));
            zi:= zi+4
             //writeln(floattostr(ada)) 
         end;
       end; 
     stlist.Free;
   end;
end; 

procedure PrintMatrix(Title : String; A : TMatrix; Ub1, Ub2 : Integer);
{ ------------------------------------------------------------------
  Print matrix A[1..Ub1, 1..Ub2]
  ------------------------------------------------------------------ }
var
  I, J : Integer;
begin
  Writeln(''); Writeln(Title); Writeln('');

  for I := 1 to Ub1 do
    begin
      for J := 1 to Ub2 do
        //Write(A[I,J]:12:4);
        //Write(floattostr(A[I][J])+#9#9);
        Write(Format(' %d.%12.4f ',[i,A[I][J]]));
      Writeln('');
    end;
end;

procedure PrintVector(Title : String; B : TVector; Ub : Integer);
{ ------------------------------------------------------------------
  Print vector B[1..Ub]
  ------------------------------------------------------------------ }
var
  I, asum1 : Integer;
  asum: float;
begin
  Writeln(''); Writeln(Title); Writeln('');
   for I := 1 to Ub do begin
     Writeln(floattostr(B[I]));
     asum:= asum+ (b[I]);
   end; 
    writeln('Sum: '+floattostr(asum))
end;

  var stlist: TStrings;
      aload: ansistring;

begin

 // setupMData();
  //setupMDataIris();
  setupMDataIrisList();
  
  DimMatrix(XX, N, Nvar);
  DimVector(M, Nvar);
  DimMatrix(V, Nvar, Nvar);
  DimMatrix(R, Nvar, Nvar);
  DimVector(S, Nvar);
  DimVector(Lambda, Nvar);
  DimMatrix(C, Nvar, Nvar);
  DimMatrix(Rc, Nvar, Nvar);
  DimMatrix(Z, N, Nvar);
  DimMatrix(F, N, Nvar);

  { Read data }
  for I := 1 to N do
    for J := 1 to Nvar do
      XX[I][J] := X[I][J];

  { Compute mean vector }
  VecMean(XX, 1, N, Nvar, M);

  { Compute variance-covariance matrix }
  MatVarCov(XX, 1, N, Nvar, M, V);

  { Compute correlation matrix }
  MatCorrel(V, Nvar, R);

  { Display results }
  Writeln('');
  PrintVector('Mean vector:', M, Nvar);
  PrintMatrix('Variance-covariance matrix:', V, Nvar, Nvar);
  PrintMatrix('Correlation matrix:', R, Nvar, Nvar);

  { Compute standard deviations }
  VecSD(XX, 1, N, Nvar, M, S);

  { Scale variables }
  ScaleVar(XX, 1, N, Nvar, M, S, Z);

  { Perform principal component analysis
    The original matrix R is destroyed }
  PCA(R, Nvar, Lambda, C, Rc);

  if MathErr = MatNonConv then
    begin
      Writeln('Non-convergence of eigenvalue computation');
      Exit;
    end;

  { Compute principal factors }
  PrinFac(Z, 1, N, Nvar, C, F);

  { Display results }
  Writeln('');
  PrintVector('Eigenvalues of correlation matrix:', Lambda, Nvar);
  PrintMatrix('Eigenvectors (columns) of correlation matrix:', C, Nvar, Nvar);
  PrintMatrix('Correlations between factors (columns) and variables (lines):',
                      Rc, Nvar, Nvar);
  PrintMatrix('Principal factors:', F, N, Nvar);
  Writeln('')
  if DMathFact(10) > 10 then begin writeln('dmath.dll loaded') 
      writeln(floattostr(DMathFact(10)))
  end
  else
     showmessageBig('please copy dmath.dll at root');
  
  
 (* voice('(( 87.9, 19.6,   1  , 1661),'+
 '( 89.9, 15.2,  90.1,  968),'+
 '(153  , 19.7,  56.6, 1353),'+
 '(132.1, 17  ,  91  , 1293),'+
 '( 88.8, 18.3,  93.7, 1153),'+
 '(220.9, 17.8, 106.9, 1286),'+
 '(117.7, 17.8,  65.5, 1104),'+
 '(109  , 18.3,  41.8, 1574),'+
 '(156.1, 17.8,  57.4, 1222),'+
 '(181.5, 16.8, 140.6,  902),'+
 '(181.4, 17,  74.3, 1150)); }'); *)
 
  print(itoa(ord('')))
  print((chr(15)))
  
  stlist:= TStringlist.create;
  //CommaSeparatedToStringList( AList : TStrings; const Value : string)
  if fileexists(Iris_DATASET) then begin
     sr:= LoadFileAsString(Iris_DATASET);
    //CommaSeparatedToStringList(stlist, sr)
    //Procedure StrToStrings(S,Sep: AnsiString; const List:TStrings;const AllowEmptyString : Boolean)
     StrToStrings(sr,#10,stlist, true) 
     stlist.Delimiter :=','
      //writeln(stlist.text)  
      writeln(itoa(stlist.count))
  end;
  stlist.Free;
  writeln('')
 // print(bigpow(60,80*25*400))  
  print(itoa(length(bigpow(28,3200))))  
  // print(itoa(length(bigpow(10,4677)))) 
  
  //setupMDataIrisList; 
  //bigint
  
End.

Doc:
15.2 Principal component analysis
15.2.1 Theory 

//https://libraryofbabel.info/About.html

The goal of Principal Component Analysis (PCA) is to replace a set of m
variables x1; x2; xm, which may be correlated, by another set f1; f2; fm,
called the principal components or principal factors. These factors are inde-
pendent (uncorrelated) variables.
Usually, the algorithm starts with the correlation matrix R which is a
mm symmetric matrix such that Rij is the correlation coecient between
variable xi and variable xj .
The eigenvalues 1; 2;m (in decreasing order) of matrix R are the
variances of the principal factors. Their sum Pp i=1 is equal to m. So, the
percentage of variance associated with the i-th factor is equal toi=m.


15.2.2 Programming
The following subroutines are available:
 VecMean(X, Lb, Ub, Nvar, M) computes the mean vector M[1..Nvar]
from matrix X[Lb..Ub, 1..Nvar].
 VecSD(X, Lb, Ub, Nvar, M, S) computes the standard deviations S[1..Nvar]
from matrix X and mean vector M.
 ScaleVar(X, Lb, Ub, Nvar, M, S, Z) computes the scaled variables
Z[Lb..Ub, 1..Nvar] from the original variables X, the means M and
the standard deviations S.
 MatVarCov(X, Lb, Ub, Nvar, M, V) computes the variance-covariance
matrix V[1..Nvar, 1..Nvar] from matrix X and mean vector M.
 MatCorrel(V, Nvar, R) computes the correlation matrix R[1..Nvar,
1..Nvar] from the variance-covariance matrix V.
 PCA(R, Nvar, MaxIter, Tol, Lambda, C, Rc) performs the princi-
pal component analysis of the correlation matrix R, which is destroyed.
MaxIter and Tol are the maximum number of iterations and the re-
quested tolerance for the Jacobi method (see paragraph 6.9.2). The
eigenvalues are returned in vector Lambda[1..Nvar], the eigenvec-
tors in the columns of matrix C[1..Nvar, 1..Nvar]. The matrix
Rc[1..Nvar, 1..Nvar] contains the correlation coecients (loadings)
between the original variables (rows) and the principal factors (columns).
 PrinFac(Z, Lb, Ub, Nvar, C, F) computes the principal factors (scores)
F[Lb..Ub, 1..Nvar] from the scaled variables Z and the matrix of
eigenvectors C.
After a call to these procedures, function MathErr returns one of the
following error codes:
 MatOk if no error occurred
 MatErrDim if the array dimensions do not match
 MatNonConv if the iterative procedure (Jacobi method) did not converge
in subroutine PCA 126
 
Iris Dataset
5.1,3.5,1.4,0.2,Iris-setosa
4.9,3.0,1.4,0.2,Iris-setosa
4.7,3.2,1.3,0.2,Iris-setosa
4.6,3.1,1.5,0.2,Iris-setosa

http://www.softwareschule.ch/examples/iris.txt 
Eigenvalues of correlation matrix (Iris-setosa 1..50):

2.07478095610672
0.986234036592617
0.692030352154745
0.246954655145922

Eigenvectors (columns) of correlation matrix:

1.       0.6007 1.       0.3409 1.       0.1316 1.       0.7111 
2.       0.5836 2.       0.4202 2.       0.0031 2.      -0.6949 
3.       0.3605 3.      -0.6719 3.       0.6391 3.      -0.1007 
4.       0.4107 4.      -0.5058 4.      -0.7577 4.       0.0357 

Eigenvalues of correlation matrix (Iris-setosa, Iris-versicolor 1..100):


Eigenvalues of correlation matrix:

3.03575806053096
0.815600511468016
0.13188357128068
0.0167578567203459

Eigenvectors (columns) of correlation matrix:

1.       0.4793 1.       0.5445 1.       0.6770 1.       0.1242 
2.      -0.3667 2.       0.8366 2.      -0.3965 2.      -0.0915 
3.       0.5678 3.       0.0297 3.      -0.2842 3.      -0.7720 
4.       0.5598 4.       0.0517 4.      -0.5511 4.       0.6166 

Eigenvalues matrix (Iris-setosa, Iris-versicolor, Iris-virginica 1..150):
Eigenvalues of correlation matrix:

2.91081808375205
0.921220930707225
0.147353278305096
0.0206077072356245

Eigenvectors (columns) of correlation matrix:

1.       0.5224 1.       0.3723 1.       0.7210 1.       0.2620 
2.      -0.2634 2.       0.9256 2.      -0.2420 2.      -0.1241 
3.       0.5813 3.       0.0211 3.      -0.1409 3.      -0.8012 
4.       0.5656 4.       0.0654 4.      -0.6338 4.       0.5235 

>>> from sklearn.datasets import load_iris\
...
>>> from sklearn.datasets import load_iris
>>> from sklearn.decomposition import PCA
>>> import pylab as pl
>>> from itertools import cycle
>>> iris = load_iris()
>>> numSamples, numFeatures = iris.data.shape
>>> print(numSamples)
150
>>> print(numFeatures)
4
>>> print(list(iris.target_names))
['setosa', 'versicolor', 'virginica']
>>> X = iris.data
>>> pca = PCA(n_components=2, whiten=True).fit(X)
>>> X_pca = pca.transform(X)
>>> print(pca.components_)   //eigenvectors!
[[ 0.36158968 -0.08226889  0.85657211  0.35884393]
 [ 0.65653988  0.72971237 -0.1757674  -0.07470647]]
>>> pca = PCA(n_components=4, whiten=True).fit(X)
>>> X_pca = pca.transform(X)
>>> print(pca.components_)
[[ 0.36158968 -0.08226889  0.85657211  0.35884393]
 [ 0.65653988  0.72971237 -0.1757674  -0.07470647]
 [-0.58099728  0.59641809  0.07252408  0.54906091]
 [ 0.31725455 -0.32409435 -0.47971899  0.75112056]]
>>> print(pca.explained_variance_ratio_)
[ 0.92461621  0.05301557  0.01718514  0.00518309]
>>> print(sum(pca.explained_variance_ratio_))
1.0
>>> from pylab import *
>>> colors = cycle('rgb')
>>> target_ids = range(len(iris.target_names))
>>> pl.figure()
<matplotlib.figure.Figure object at 0x0000005DB1598748>
>>> for i, c, label in zip(target_ids, colors, iris.target_names):
...     pl.scatter(X_pca[iris.target == i, 0], X_pca[iris.target == i, 1],c=c, l
abel=label)
...
<matplotlib.collections.PathCollection object at 0x0000005DB22B9630>
<matplotlib.collections.PathCollection object at 0x0000005DB22B9978>
<matplotlib.collections.PathCollection object at 0x0000005DB22B9E48>
>>>
>>> pl.legend()
<matplotlib.legend.Legend object at 0x0000005DB22C7160>
>>> pl.show()
>>> pl.show()